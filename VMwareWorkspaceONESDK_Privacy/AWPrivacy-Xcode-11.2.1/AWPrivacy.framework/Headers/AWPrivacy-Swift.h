#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.2 effective-4.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AWPrivacy",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class AWPrivacyContent;

SWIFT_CLASS("_TtC9AWPrivacy15AWPrivacyConfig")
@interface AWPrivacyConfig : NSObject
/// Application name to be used in the Module.
/// This will override the value that the module infers from the Main Bundle (info.plist).
@property (nonatomic, copy) NSString * _Nullable applicationName;
/// Determines if user is allowed to exit terms screen without accepting. This will display a popup to the user.
/// Default: false
@property (nonatomic) BOOL privacyRejectShow;
/// Localized Header title text that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable aboutPrivacyTitle;
/// Localized header description that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable aboutPrivacyDescription;
/// Determines if the data sharing (Feature Analytics) consent screen should be displayed to the user.
/// Default: true
@property (nonatomic) BOOL dataSharingShow;
/// Localized Header title text that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataSharingTitle;
/// Localized string for the header description that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataSharingDescription;
/// URL to be loaded to show information about any <em>MDM Data</em> that is collected. If no value is provided, the section will not be shown.
/// This link will be loaded in a web view on tap of device management section.
/// Default: No Value.
@property (nonatomic, copy) NSURL * _Nullable deviceManagementLink;
/// Localized title text for the device management section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable deviceManagementTitle;
/// Localized description text for the device management section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable deviceManagementDescription;
/// Localized title text for the app permissions section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable appPermissionTitle;
/// Localized description text for the app permissions section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable appPermissionDescription;
/// List that contains the list of permissions required by the application.
/// These will be displayed on tap of the app permissions section.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appPermissionItems;
/// Localized description text for the app data collection section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataCollectionDescription;
/// List that contains the list of data collected by the application.
/// These will be displayed on tap of the app data collection section.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable dataCollectionItems;
/// Localized title text for the app data collection section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataCollectionTitle;
/// A custom path to your app’s privacy setting screen.
/// Defaults to : Settings->Privacy
/// For display, the module will transform it to something like [dataSharingNavigation] → Data sharing.
/// Therefore, the default display would be Settings→Privacy→ Data sharing
@property (nonatomic, copy) NSString * _Nullable dataSharingNavigation;
/// Link to the customer’s privacy policy.
/// This link will be loaded in a web view on tap of customer’s privacy policy section.
/// Default: No value.
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyLink;
/// Determines if the customer privacy policy section is displayed.
/// Default: true
@property (nonatomic) BOOL enterprisePolicyShow;
/// Localized title text for the customer’s privacy section.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyTitle;
/// Localized title text for the customer’s privacy section.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyDescription;
/// Default content composed for <em>DataCollectionSummary</em>  that apps can reuse.
/// Note : Apps will still need to pass this information in <code>appDataCollectionSummary</code> for the module to display
/// return list includes the following
/// <ul>
///   <li>
///     Device hardware
///   </li>
///   <li>
///     User information
///   </li>
///   <li>
///     App information
///   </li>
///   <li>
///     Diagnostics
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AWPrivacyContent *> * _Nonnull dataCollectionDefaultItems;)
+ (NSArray<AWPrivacyContent *> * _Nonnull)dataCollectionDefaultItems SWIFT_WARN_UNUSED_RESULT;
/// Value from console that determines if admins allow feature Analytics. If the value is <code>false</code>, the User opt in screen for data sharing will not be shown to the user.
/// Default value : true
@property (nonatomic) BOOL allowFeatureAnalytics SWIFT_DEPRECATED_MSG("", "dataSharingShow");
/// Determines if user is allowed to exit terms screen without accepting. This will display a popup to the user.
/// Default value: false
@property (nonatomic) BOOL allowExit SWIFT_DEPRECATED_MSG("", "privacyRejectShow");
/// Link to the customer’s privacy policy.
@property (nonatomic, copy) NSString * _Nullable customerPrivacyPolicyLink SWIFT_DEPRECATED_MSG("", "enterprisePolicyLink");
/// Determines if the customer privacy policy section is displayed.
/// Default value: false
@property (nonatomic) BOOL hideCustomerPrivacyPolicy SWIFT_DEPRECATED_MSG("", "enterprisePolicyShow");
/// URL to be loaded for <em>MDM Data</em> If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSURL * _Nullable mdmDataURL SWIFT_DEPRECATED_MSG("", "deviceManagementLink");
/// Content to be displayed for <em>App permissions</em>.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appPermissionSummary SWIFT_DEPRECATED_MSG("", "appPermissionItems");
/// Content to be displayed for <em>App Data collection</em>.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appDataCollectionSummary SWIFT_DEPRECATED_MSG("", "dataCollectionItems");
/// Default content composed for <em>DataCollectionSummary</em>  that apps can reuse.
/// Note : Apps will still need to pass this information in <code>appDataCollectionSummary</code> for the module to display
/// return list includes the following
/// <ul>
///   <li>
///     Device hardware
///   </li>
///   <li>
///     User information
///   </li>
///   <li>
///     App information
///   </li>
///   <li>
///     Diagnostics
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AWPrivacyContent *> * _Nonnull defaultDataCollectionSummary SWIFT_DEPRECATED_MSG("", "dataCollectionDefaultItems");)
+ (NSArray<AWPrivacyContent *> * _Nonnull)defaultDataCollectionSummary SWIFT_WARN_UNUSED_RESULT;
/// A custom path to your app’s privacy setting screen.
/// Defaults to <em>Settings->Data sharing with Vmware.</em>
/// The message will be displayed to user as: <em>You can always change this later in path->to->your->apps->privacy->settings</em>
@property (nonatomic, copy) NSString * _Nullable appPrivacySettingPath SWIFT_DEPRECATED_MSG("", "dataSharingNavigation");
/// Localized Header title text that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable privacyTermsHeaderTitle SWIFT_DEPRECATED_MSG("", "aboutPrivacyTitle");
/// Localized string for the header body that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable privacyTermsHeaderBody SWIFT_DEPRECATED_MSG("", "aboutPrivacyDescription");
/// Localized title that will displayed along with app data collection summary section
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable appDataCollectionTitle SWIFT_DEPRECATED_MSG("", "dataCollectionDescription");
/// Localized title that will displayed along with app permissions summary section
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable appPermissionsTitle SWIFT_DEPRECATED_MSG("", "appPermissionDescription");
/// Localized Header title text that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable dataSharingHeaderTitle SWIFT_DEPRECATED_MSG("", "dataSharingTitle");
/// Localized string for the header body that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable dataSharingHeaderBody SWIFT_DEPRECATED_MSG("", "dataSharingDescription");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
enum PrivacyContentImageType : NSInteger;

SWIFT_CLASS("_TtC9AWPrivacy16AWPrivacyContent")
@interface AWPrivacyContent : NSObject
/// Localized Title of the content.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Localized Short description of the content.
@property (nonatomic, copy) NSString * _Nonnull summary;
/// Image to be displayed along the content
@property (nonatomic, strong) UIImage * _Nullable iconImage;
/// As an alternative to icon images, types can be specified for predefined types.
/// The module will associate the content with an image corresponding to the type.
@property (nonatomic) enum PrivacyContentImageType imageType;
/// Initializer
/// \param title Localized Title of the content.
///
/// \param summary Localized Short description of the content.
///
/// \param image Image to be displayed along the content
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title summary:(NSString * _Nonnull)summary image:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
/// Convenience Initializer
/// \param title Localized Title of the content.
///
/// \param summary Localized Short description of the content.
///
/// \param imageType Predefined image for the given type. If the type is unknown, the <code>iconImage</code> will be nil
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title summary:(NSString * _Nonnull)summary imageType:(enum PrivacyContentImageType)imageType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol AWPrivacyControllerDelegate;
@class UIViewController;

SWIFT_CLASS("_TtC9AWPrivacy19AWPrivacyController")
@interface AWPrivacyController : NSObject
/// Determine if there is a need to get user consent for privacy terms
/// This can true in the following cases
/// <ul>
///   <li>
///     If the user has never seen the privacy screen before.
///   </li>
///   <li>
///     If the user has seen privacy screen but not the Data sharing screen.
///     This can happen if <code>allowFeatureAnalytics</code> in config was <code>false</code> at the first time the
///     privacy controller was requested but has now changed the status to true.
///     This to ensure we get user consent for acceptance.
///   </li>
///   <li>
///     If the supplied <code>AWPrivacyConfig</code> is different from what was available when the user
///     accepted privacy terms.
///   </li>
/// </ul>
/// \param config Configuration to validate
///
///
/// returns:
/// Boolean that indicates if the apps need to display the privacy controller on launch to get user consent
+ (BOOL)needsUserConsentForConfig:(AWPrivacyConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// Required initializer
/// \param config Instance of <code>AWPrivacyConfig</code> that has the configurations required for the app.
/// When nil, the defaults will be used.
///
/// \param delegate Call back to the application
///
- (nonnull instancetype)initWithConfig:(AWPrivacyConfig * _Nullable)config delegate:(id <AWPrivacyControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Creates a view controller to get the user consent for privacy terms and data sharing based on the config provided.
/// The controller assumes that this view conroller will always be embedded in a UINavigationController. If you don’t want this method to embed the vc in navigation controller, it’s the caller’s responsibility to ensure it is embedded in a UINavigationController when displayed to the user
/// \param embedInNavController If set to <code>true</code> will return a viewcontroller that is embedded in a <code>UINavigationController</code>. Defaults to true
///
///
/// returns:
/// Instance of <code>UIViewController</code> that will allow to get user consent for privacy terms and data sharing.
- (UIViewController * _Nonnull)makeUserConsentViewController:(BOOL)embedInNavController SWIFT_WARN_UNUSED_RESULT;
/// Creates a view controller to view the privacy settings/terms based on the config provided.
/// The controller assumes that this view conroller will always be embedded in a UINavigationController. If you don’t want this method to embed in navigation controller, it’s the caller’s responsibility to ensure it is embedded in a UINavigationController when displayed to the user
/// \param embedInNavController If set to <code>true</code> will return a viewcontroller that is embedded in a <code>UINavigationController</code>. Defaults to false.
///
///
/// returns:
/// Instance of <code>UIViewController</code> that will allow to view the privacy policies and data sharing status
- (UIViewController * _Nonnull)makePreviewPoliciesViewController:(BOOL)embedInNavController SWIFT_WARN_UNUSED_RESULT;
/// Clear any persisted state from the default data store
+ (void)reset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum AWPrivacyUserOptInStatus : NSInteger;

SWIFT_PROTOCOL("_TtP9AWPrivacy27AWPrivacyControllerDelegate_")
@protocol AWPrivacyControllerDelegate
@optional
/// Called when the user opt-in status has changed. Apps that set <code>false</code> to <code>allowFeatureAnalytics</code> in the Config will never get this call back.
/// \param status The new status after user action
///
- (void)userOptInStatusDidChangeWithStatus:(enum AWPrivacyUserOptInStatus)status;
/// Called when the user has not accepted to the Terms in the Privacy screen.
- (void)userDidDeclinePrivacyTerms;
@end

/// User Opt-in status in the Privacy dialog
/// <em>Values</em>
/// <code>unknown</code>  User opt-in pending
/// <code>enableAnalytics</code> The user has opted in for analytics.
/// <code>disableAnalytics</code> The user has opted out for analytics.
typedef SWIFT_ENUM(NSInteger, AWPrivacyUserOptInStatus, closed) {
  AWPrivacyUserOptInStatusUnknown = 0,
  AWPrivacyUserOptInStatusEnableAnalytics = 1,
  AWPrivacyUserOptInStatusDisableAnalytics = 2,
};



/// Predefined content types.
/// The module is aware of the icons to associate for these types
typedef SWIFT_ENUM(NSInteger, PrivacyContentImageType, closed) {
  PrivacyContentImageTypeUnknown = 0,
  PrivacyContentImageTypeCalendar = 1,
  PrivacyContentImageTypeContacts = 2,
  PrivacyContentImageTypePhotos = 3,
  PrivacyContentImageTypeCamera = 4,
  PrivacyContentImageTypeLocationServices = 5,
  PrivacyContentImageTypeNotifications = 6,
  PrivacyContentImageTypeFaceId = 7,
  PrivacyContentImageTypeDeviceHardware = 8,
  PrivacyContentImageTypeUserInformation = 9,
  PrivacyContentImageTypeAppInformation = 10,
  PrivacyContentImageTypeDiagnostics = 11,
};









#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.2 effective-4.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AWPrivacy",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class AWPrivacyContent;

SWIFT_CLASS("_TtC9AWPrivacy15AWPrivacyConfig")
@interface AWPrivacyConfig : NSObject
/// Application name to be used in the Module.
/// This will override the value that the module infers from the Main Bundle (info.plist).
@property (nonatomic, copy) NSString * _Nullable applicationName;
/// Determines if user is allowed to exit terms screen without accepting. This will display a popup to the user.
/// Default: false
@property (nonatomic) BOOL privacyRejectShow;
/// Localized Header title text that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable aboutPrivacyTitle;
/// Localized header description that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable aboutPrivacyDescription;
/// Determines if the data sharing (Feature Analytics) consent screen should be displayed to the user.
/// Default: true
@property (nonatomic) BOOL dataSharingShow;
/// Localized Header title text that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataSharingTitle;
/// Localized string for the header description that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataSharingDescription;
/// URL to be loaded to show information about any <em>MDM Data</em> that is collected. If no value is provided, the section will not be shown.
/// This link will be loaded in a web view on tap of device management section.
/// Default: No Value.
@property (nonatomic, copy) NSURL * _Nullable deviceManagementLink;
/// Localized title text for the device management section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable deviceManagementTitle;
/// Localized description text for the device management section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable deviceManagementDescription;
/// Localized title text for the app permissions section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable appPermissionTitle;
/// Localized description text for the app permissions section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable appPermissionDescription;
/// List that contains the list of permissions required by the application.
/// These will be displayed on tap of the app permissions section.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appPermissionItems;
/// Localized description text for the app data collection section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataCollectionDescription;
/// List that contains the list of data collected by the application.
/// These will be displayed on tap of the app data collection section.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable dataCollectionItems;
/// Localized title text for the app data collection section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataCollectionTitle;
/// A custom path to your app’s privacy setting screen.
/// Defaults to : Settings->Privacy
/// For display, the module will transform it to something like [dataSharingNavigation] → Data sharing.
/// Therefore, the default display would be Settings→Privacy→ Data sharing
@property (nonatomic, copy) NSString * _Nullable dataSharingNavigation;
/// Link to the customer’s privacy policy.
/// This link will be loaded in a web view on tap of customer’s privacy policy section.
/// Default: No value.
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyLink;
/// Determines if the customer privacy policy section is displayed.
/// Default: true
@property (nonatomic) BOOL enterprisePolicyShow;
/// Localized title text for the customer’s privacy section.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyTitle;
/// Localized title text for the customer’s privacy section.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyDescription;
/// Default content composed for <em>DataCollectionSummary</em>  that apps can reuse.
/// Note : Apps will still need to pass this information in <code>appDataCollectionSummary</code> for the module to display
/// return list includes the following
/// <ul>
///   <li>
///     Device hardware
///   </li>
///   <li>
///     User information
///   </li>
///   <li>
///     App information
///   </li>
///   <li>
///     Diagnostics
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AWPrivacyContent *> * _Nonnull dataCollectionDefaultItems;)
+ (NSArray<AWPrivacyContent *> * _Nonnull)dataCollectionDefaultItems SWIFT_WARN_UNUSED_RESULT;
/// Value from console that determines if admins allow feature Analytics. If the value is <code>false</code>, the User opt in screen for data sharing will not be shown to the user.
/// Default value : true
@property (nonatomic) BOOL allowFeatureAnalytics SWIFT_DEPRECATED_MSG("", "dataSharingShow");
/// Determines if user is allowed to exit terms screen without accepting. This will display a popup to the user.
/// Default value: false
@property (nonatomic) BOOL allowExit SWIFT_DEPRECATED_MSG("", "privacyRejectShow");
/// Link to the customer’s privacy policy.
@property (nonatomic, copy) NSString * _Nullable customerPrivacyPolicyLink SWIFT_DEPRECATED_MSG("", "enterprisePolicyLink");
/// Determines if the customer privacy policy section is displayed.
/// Default value: false
@property (nonatomic) BOOL hideCustomerPrivacyPolicy SWIFT_DEPRECATED_MSG("", "enterprisePolicyShow");
/// URL to be loaded for <em>MDM Data</em> If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSURL * _Nullable mdmDataURL SWIFT_DEPRECATED_MSG("", "deviceManagementLink");
/// Content to be displayed for <em>App permissions</em>.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appPermissionSummary SWIFT_DEPRECATED_MSG("", "appPermissionItems");
/// Content to be displayed for <em>App Data collection</em>.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appDataCollectionSummary SWIFT_DEPRECATED_MSG("", "dataCollectionItems");
/// Default content composed for <em>DataCollectionSummary</em>  that apps can reuse.
/// Note : Apps will still need to pass this information in <code>appDataCollectionSummary</code> for the module to display
/// return list includes the following
/// <ul>
///   <li>
///     Device hardware
///   </li>
///   <li>
///     User information
///   </li>
///   <li>
///     App information
///   </li>
///   <li>
///     Diagnostics
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AWPrivacyContent *> * _Nonnull defaultDataCollectionSummary SWIFT_DEPRECATED_MSG("", "dataCollectionDefaultItems");)
+ (NSArray<AWPrivacyContent *> * _Nonnull)defaultDataCollectionSummary SWIFT_WARN_UNUSED_RESULT;
/// A custom path to your app’s privacy setting screen.
/// Defaults to <em>Settings->Data sharing with Vmware.</em>
/// The message will be displayed to user as: <em>You can always change this later in path->to->your->apps->privacy->settings</em>
@property (nonatomic, copy) NSString * _Nullable appPrivacySettingPath SWIFT_DEPRECATED_MSG("", "dataSharingNavigation");
/// Localized Header title text that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable privacyTermsHeaderTitle SWIFT_DEPRECATED_MSG("", "aboutPrivacyTitle");
/// Localized string for the header body that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable privacyTermsHeaderBody SWIFT_DEPRECATED_MSG("", "aboutPrivacyDescription");
/// Localized title that will displayed along with app data collection summary section
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable appDataCollectionTitle SWIFT_DEPRECATED_MSG("", "dataCollectionDescription");
/// Localized title that will displayed along with app permissions summary section
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable appPermissionsTitle SWIFT_DEPRECATED_MSG("", "appPermissionDescription");
/// Localized Header title text that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable dataSharingHeaderTitle SWIFT_DEPRECATED_MSG("", "dataSharingTitle");
/// Localized string for the header body that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable dataSharingHeaderBody SWIFT_DEPRECATED_MSG("", "dataSharingDescription");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
enum PrivacyContentImageType : NSInteger;

SWIFT_CLASS("_TtC9AWPrivacy16AWPrivacyContent")
@interface AWPrivacyContent : NSObject
/// Localized Title of the content.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Localized Short description of the content.
@property (nonatomic, copy) NSString * _Nonnull summary;
/// Image to be displayed along the content
@property (nonatomic, strong) UIImage * _Nullable iconImage;
/// As an alternative to icon images, types can be specified for predefined types.
/// The module will associate the content with an image corresponding to the type.
@property (nonatomic) enum PrivacyContentImageType imageType;
/// Initializer
/// \param title Localized Title of the content.
///
/// \param summary Localized Short description of the content.
///
/// \param image Image to be displayed along the content
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title summary:(NSString * _Nonnull)summary image:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
/// Convenience Initializer
/// \param title Localized Title of the content.
///
/// \param summary Localized Short description of the content.
///
/// \param imageType Predefined image for the given type. If the type is unknown, the <code>iconImage</code> will be nil
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title summary:(NSString * _Nonnull)summary imageType:(enum PrivacyContentImageType)imageType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol AWPrivacyControllerDelegate;
@class UIViewController;

SWIFT_CLASS("_TtC9AWPrivacy19AWPrivacyController")
@interface AWPrivacyController : NSObject
/// Determine if there is a need to get user consent for privacy terms
/// This can true in the following cases
/// <ul>
///   <li>
///     If the user has never seen the privacy screen before.
///   </li>
///   <li>
///     If the user has seen privacy screen but not the Data sharing screen.
///     This can happen if <code>allowFeatureAnalytics</code> in config was <code>false</code> at the first time the
///     privacy controller was requested but has now changed the status to true.
///     This to ensure we get user consent for acceptance.
///   </li>
///   <li>
///     If the supplied <code>AWPrivacyConfig</code> is different from what was available when the user
///     accepted privacy terms.
///   </li>
/// </ul>
/// \param config Configuration to validate
///
///
/// returns:
/// Boolean that indicates if the apps need to display the privacy controller on launch to get user consent
+ (BOOL)needsUserConsentForConfig:(AWPrivacyConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// Required initializer
/// \param config Instance of <code>AWPrivacyConfig</code> that has the configurations required for the app.
/// When nil, the defaults will be used.
///
/// \param delegate Call back to the application
///
- (nonnull instancetype)initWithConfig:(AWPrivacyConfig * _Nullable)config delegate:(id <AWPrivacyControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Creates a view controller to get the user consent for privacy terms and data sharing based on the config provided.
/// The controller assumes that this view conroller will always be embedded in a UINavigationController. If you don’t want this method to embed the vc in navigation controller, it’s the caller’s responsibility to ensure it is embedded in a UINavigationController when displayed to the user
/// \param embedInNavController If set to <code>true</code> will return a viewcontroller that is embedded in a <code>UINavigationController</code>. Defaults to true
///
///
/// returns:
/// Instance of <code>UIViewController</code> that will allow to get user consent for privacy terms and data sharing.
- (UIViewController * _Nonnull)makeUserConsentViewController:(BOOL)embedInNavController SWIFT_WARN_UNUSED_RESULT;
/// Creates a view controller to view the privacy settings/terms based on the config provided.
/// The controller assumes that this view conroller will always be embedded in a UINavigationController. If you don’t want this method to embed in navigation controller, it’s the caller’s responsibility to ensure it is embedded in a UINavigationController when displayed to the user
/// \param embedInNavController If set to <code>true</code> will return a viewcontroller that is embedded in a <code>UINavigationController</code>. Defaults to false.
///
///
/// returns:
/// Instance of <code>UIViewController</code> that will allow to view the privacy policies and data sharing status
- (UIViewController * _Nonnull)makePreviewPoliciesViewController:(BOOL)embedInNavController SWIFT_WARN_UNUSED_RESULT;
/// Clear any persisted state from the default data store
+ (void)reset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum AWPrivacyUserOptInStatus : NSInteger;

SWIFT_PROTOCOL("_TtP9AWPrivacy27AWPrivacyControllerDelegate_")
@protocol AWPrivacyControllerDelegate
@optional
/// Called when the user opt-in status has changed. Apps that set <code>false</code> to <code>allowFeatureAnalytics</code> in the Config will never get this call back.
/// \param status The new status after user action
///
- (void)userOptInStatusDidChangeWithStatus:(enum AWPrivacyUserOptInStatus)status;
/// Called when the user has not accepted to the Terms in the Privacy screen.
- (void)userDidDeclinePrivacyTerms;
@end

/// User Opt-in status in the Privacy dialog
/// <em>Values</em>
/// <code>unknown</code>  User opt-in pending
/// <code>enableAnalytics</code> The user has opted in for analytics.
/// <code>disableAnalytics</code> The user has opted out for analytics.
typedef SWIFT_ENUM(NSInteger, AWPrivacyUserOptInStatus, closed) {
  AWPrivacyUserOptInStatusUnknown = 0,
  AWPrivacyUserOptInStatusEnableAnalytics = 1,
  AWPrivacyUserOptInStatusDisableAnalytics = 2,
};



/// Predefined content types.
/// The module is aware of the icons to associate for these types
typedef SWIFT_ENUM(NSInteger, PrivacyContentImageType, closed) {
  PrivacyContentImageTypeUnknown = 0,
  PrivacyContentImageTypeCalendar = 1,
  PrivacyContentImageTypeContacts = 2,
  PrivacyContentImageTypePhotos = 3,
  PrivacyContentImageTypeCamera = 4,
  PrivacyContentImageTypeLocationServices = 5,
  PrivacyContentImageTypeNotifications = 6,
  PrivacyContentImageTypeFaceId = 7,
  PrivacyContentImageTypeDeviceHardware = 8,
  PrivacyContentImageTypeUserInformation = 9,
  PrivacyContentImageTypeAppInformation = 10,
  PrivacyContentImageTypeDiagnostics = 11,
};









#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.2 effective-4.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AWPrivacy",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class AWPrivacyContent;

SWIFT_CLASS("_TtC9AWPrivacy15AWPrivacyConfig")
@interface AWPrivacyConfig : NSObject
/// Application name to be used in the Module.
/// This will override the value that the module infers from the Main Bundle (info.plist).
@property (nonatomic, copy) NSString * _Nullable applicationName;
/// Determines if user is allowed to exit terms screen without accepting. This will display a popup to the user.
/// Default: false
@property (nonatomic) BOOL privacyRejectShow;
/// Localized Header title text that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable aboutPrivacyTitle;
/// Localized header description that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable aboutPrivacyDescription;
/// Determines if the data sharing (Feature Analytics) consent screen should be displayed to the user.
/// Default: true
@property (nonatomic) BOOL dataSharingShow;
/// Localized Header title text that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataSharingTitle;
/// Localized string for the header description that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataSharingDescription;
/// URL to be loaded to show information about any <em>MDM Data</em> that is collected. If no value is provided, the section will not be shown.
/// This link will be loaded in a web view on tap of device management section.
/// Default: No Value.
@property (nonatomic, copy) NSURL * _Nullable deviceManagementLink;
/// Localized title text for the device management section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable deviceManagementTitle;
/// Localized description text for the device management section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable deviceManagementDescription;
/// Localized title text for the app permissions section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable appPermissionTitle;
/// Localized description text for the app permissions section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable appPermissionDescription;
/// List that contains the list of permissions required by the application.
/// These will be displayed on tap of the app permissions section.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appPermissionItems;
/// Localized description text for the app data collection section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataCollectionDescription;
/// List that contains the list of data collected by the application.
/// These will be displayed on tap of the app data collection section.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable dataCollectionItems;
/// Localized title text for the app data collection section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataCollectionTitle;
/// A custom path to your app’s privacy setting screen.
/// Defaults to : Settings->Privacy
/// For display, the module will transform it to something like [dataSharingNavigation] → Data sharing.
/// Therefore, the default display would be Settings→Privacy→ Data sharing
@property (nonatomic, copy) NSString * _Nullable dataSharingNavigation;
/// Link to the customer’s privacy policy.
/// This link will be loaded in a web view on tap of customer’s privacy policy section.
/// Default: No value.
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyLink;
/// Determines if the customer privacy policy section is displayed.
/// Default: true
@property (nonatomic) BOOL enterprisePolicyShow;
/// Localized title text for the customer’s privacy section.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyTitle;
/// Localized title text for the customer’s privacy section.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyDescription;
/// Default content composed for <em>DataCollectionSummary</em>  that apps can reuse.
/// Note : Apps will still need to pass this information in <code>appDataCollectionSummary</code> for the module to display
/// return list includes the following
/// <ul>
///   <li>
///     Device hardware
///   </li>
///   <li>
///     User information
///   </li>
///   <li>
///     App information
///   </li>
///   <li>
///     Diagnostics
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AWPrivacyContent *> * _Nonnull dataCollectionDefaultItems;)
+ (NSArray<AWPrivacyContent *> * _Nonnull)dataCollectionDefaultItems SWIFT_WARN_UNUSED_RESULT;
/// Value from console that determines if admins allow feature Analytics. If the value is <code>false</code>, the User opt in screen for data sharing will not be shown to the user.
/// Default value : true
@property (nonatomic) BOOL allowFeatureAnalytics SWIFT_DEPRECATED_MSG("", "dataSharingShow");
/// Determines if user is allowed to exit terms screen without accepting. This will display a popup to the user.
/// Default value: false
@property (nonatomic) BOOL allowExit SWIFT_DEPRECATED_MSG("", "privacyRejectShow");
/// Link to the customer’s privacy policy.
@property (nonatomic, copy) NSString * _Nullable customerPrivacyPolicyLink SWIFT_DEPRECATED_MSG("", "enterprisePolicyLink");
/// Determines if the customer privacy policy section is displayed.
/// Default value: false
@property (nonatomic) BOOL hideCustomerPrivacyPolicy SWIFT_DEPRECATED_MSG("", "enterprisePolicyShow");
/// URL to be loaded for <em>MDM Data</em> If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSURL * _Nullable mdmDataURL SWIFT_DEPRECATED_MSG("", "deviceManagementLink");
/// Content to be displayed for <em>App permissions</em>.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appPermissionSummary SWIFT_DEPRECATED_MSG("", "appPermissionItems");
/// Content to be displayed for <em>App Data collection</em>.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appDataCollectionSummary SWIFT_DEPRECATED_MSG("", "dataCollectionItems");
/// Default content composed for <em>DataCollectionSummary</em>  that apps can reuse.
/// Note : Apps will still need to pass this information in <code>appDataCollectionSummary</code> for the module to display
/// return list includes the following
/// <ul>
///   <li>
///     Device hardware
///   </li>
///   <li>
///     User information
///   </li>
///   <li>
///     App information
///   </li>
///   <li>
///     Diagnostics
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AWPrivacyContent *> * _Nonnull defaultDataCollectionSummary SWIFT_DEPRECATED_MSG("", "dataCollectionDefaultItems");)
+ (NSArray<AWPrivacyContent *> * _Nonnull)defaultDataCollectionSummary SWIFT_WARN_UNUSED_RESULT;
/// A custom path to your app’s privacy setting screen.
/// Defaults to <em>Settings->Data sharing with Vmware.</em>
/// The message will be displayed to user as: <em>You can always change this later in path->to->your->apps->privacy->settings</em>
@property (nonatomic, copy) NSString * _Nullable appPrivacySettingPath SWIFT_DEPRECATED_MSG("", "dataSharingNavigation");
/// Localized Header title text that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable privacyTermsHeaderTitle SWIFT_DEPRECATED_MSG("", "aboutPrivacyTitle");
/// Localized string for the header body that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable privacyTermsHeaderBody SWIFT_DEPRECATED_MSG("", "aboutPrivacyDescription");
/// Localized title that will displayed along with app data collection summary section
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable appDataCollectionTitle SWIFT_DEPRECATED_MSG("", "dataCollectionDescription");
/// Localized title that will displayed along with app permissions summary section
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable appPermissionsTitle SWIFT_DEPRECATED_MSG("", "appPermissionDescription");
/// Localized Header title text that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable dataSharingHeaderTitle SWIFT_DEPRECATED_MSG("", "dataSharingTitle");
/// Localized string for the header body that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable dataSharingHeaderBody SWIFT_DEPRECATED_MSG("", "dataSharingDescription");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
enum PrivacyContentImageType : NSInteger;

SWIFT_CLASS("_TtC9AWPrivacy16AWPrivacyContent")
@interface AWPrivacyContent : NSObject
/// Localized Title of the content.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Localized Short description of the content.
@property (nonatomic, copy) NSString * _Nonnull summary;
/// Image to be displayed along the content
@property (nonatomic, strong) UIImage * _Nullable iconImage;
/// As an alternative to icon images, types can be specified for predefined types.
/// The module will associate the content with an image corresponding to the type.
@property (nonatomic) enum PrivacyContentImageType imageType;
/// Initializer
/// \param title Localized Title of the content.
///
/// \param summary Localized Short description of the content.
///
/// \param image Image to be displayed along the content
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title summary:(NSString * _Nonnull)summary image:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
/// Convenience Initializer
/// \param title Localized Title of the content.
///
/// \param summary Localized Short description of the content.
///
/// \param imageType Predefined image for the given type. If the type is unknown, the <code>iconImage</code> will be nil
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title summary:(NSString * _Nonnull)summary imageType:(enum PrivacyContentImageType)imageType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol AWPrivacyControllerDelegate;
@class UIViewController;

SWIFT_CLASS("_TtC9AWPrivacy19AWPrivacyController")
@interface AWPrivacyController : NSObject
/// Determine if there is a need to get user consent for privacy terms
/// This can true in the following cases
/// <ul>
///   <li>
///     If the user has never seen the privacy screen before.
///   </li>
///   <li>
///     If the user has seen privacy screen but not the Data sharing screen.
///     This can happen if <code>allowFeatureAnalytics</code> in config was <code>false</code> at the first time the
///     privacy controller was requested but has now changed the status to true.
///     This to ensure we get user consent for acceptance.
///   </li>
///   <li>
///     If the supplied <code>AWPrivacyConfig</code> is different from what was available when the user
///     accepted privacy terms.
///   </li>
/// </ul>
/// \param config Configuration to validate
///
///
/// returns:
/// Boolean that indicates if the apps need to display the privacy controller on launch to get user consent
+ (BOOL)needsUserConsentForConfig:(AWPrivacyConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// Required initializer
/// \param config Instance of <code>AWPrivacyConfig</code> that has the configurations required for the app.
/// When nil, the defaults will be used.
///
/// \param delegate Call back to the application
///
- (nonnull instancetype)initWithConfig:(AWPrivacyConfig * _Nullable)config delegate:(id <AWPrivacyControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Creates a view controller to get the user consent for privacy terms and data sharing based on the config provided.
/// The controller assumes that this view conroller will always be embedded in a UINavigationController. If you don’t want this method to embed the vc in navigation controller, it’s the caller’s responsibility to ensure it is embedded in a UINavigationController when displayed to the user
/// \param embedInNavController If set to <code>true</code> will return a viewcontroller that is embedded in a <code>UINavigationController</code>. Defaults to true
///
///
/// returns:
/// Instance of <code>UIViewController</code> that will allow to get user consent for privacy terms and data sharing.
- (UIViewController * _Nonnull)makeUserConsentViewController:(BOOL)embedInNavController SWIFT_WARN_UNUSED_RESULT;
/// Creates a view controller to view the privacy settings/terms based on the config provided.
/// The controller assumes that this view conroller will always be embedded in a UINavigationController. If you don’t want this method to embed in navigation controller, it’s the caller’s responsibility to ensure it is embedded in a UINavigationController when displayed to the user
/// \param embedInNavController If set to <code>true</code> will return a viewcontroller that is embedded in a <code>UINavigationController</code>. Defaults to false.
///
///
/// returns:
/// Instance of <code>UIViewController</code> that will allow to view the privacy policies and data sharing status
- (UIViewController * _Nonnull)makePreviewPoliciesViewController:(BOOL)embedInNavController SWIFT_WARN_UNUSED_RESULT;
/// Clear any persisted state from the default data store
+ (void)reset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum AWPrivacyUserOptInStatus : NSInteger;

SWIFT_PROTOCOL("_TtP9AWPrivacy27AWPrivacyControllerDelegate_")
@protocol AWPrivacyControllerDelegate
@optional
/// Called when the user opt-in status has changed. Apps that set <code>false</code> to <code>allowFeatureAnalytics</code> in the Config will never get this call back.
/// \param status The new status after user action
///
- (void)userOptInStatusDidChangeWithStatus:(enum AWPrivacyUserOptInStatus)status;
/// Called when the user has not accepted to the Terms in the Privacy screen.
- (void)userDidDeclinePrivacyTerms;
@end

/// User Opt-in status in the Privacy dialog
/// <em>Values</em>
/// <code>unknown</code>  User opt-in pending
/// <code>enableAnalytics</code> The user has opted in for analytics.
/// <code>disableAnalytics</code> The user has opted out for analytics.
typedef SWIFT_ENUM(NSInteger, AWPrivacyUserOptInStatus, closed) {
  AWPrivacyUserOptInStatusUnknown = 0,
  AWPrivacyUserOptInStatusEnableAnalytics = 1,
  AWPrivacyUserOptInStatusDisableAnalytics = 2,
};



/// Predefined content types.
/// The module is aware of the icons to associate for these types
typedef SWIFT_ENUM(NSInteger, PrivacyContentImageType, closed) {
  PrivacyContentImageTypeUnknown = 0,
  PrivacyContentImageTypeCalendar = 1,
  PrivacyContentImageTypeContacts = 2,
  PrivacyContentImageTypePhotos = 3,
  PrivacyContentImageTypeCamera = 4,
  PrivacyContentImageTypeLocationServices = 5,
  PrivacyContentImageTypeNotifications = 6,
  PrivacyContentImageTypeFaceId = 7,
  PrivacyContentImageTypeDeviceHardware = 8,
  PrivacyContentImageTypeUserInformation = 9,
  PrivacyContentImageTypeAppInformation = 10,
  PrivacyContentImageTypeDiagnostics = 11,
};









#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.2 effective-4.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="AWPrivacy",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class AWPrivacyContent;

SWIFT_CLASS("_TtC9AWPrivacy15AWPrivacyConfig")
@interface AWPrivacyConfig : NSObject
/// Application name to be used in the Module.
/// This will override the value that the module infers from the Main Bundle (info.plist).
@property (nonatomic, copy) NSString * _Nullable applicationName;
/// Determines if user is allowed to exit terms screen without accepting. This will display a popup to the user.
/// Default: false
@property (nonatomic) BOOL privacyRejectShow;
/// Localized Header title text that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable aboutPrivacyTitle;
/// Localized header description that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable aboutPrivacyDescription;
/// Determines if the data sharing (Feature Analytics) consent screen should be displayed to the user.
/// Default: true
@property (nonatomic) BOOL dataSharingShow;
/// Localized Header title text that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataSharingTitle;
/// Localized string for the header description that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataSharingDescription;
/// URL to be loaded to show information about any <em>MDM Data</em> that is collected. If no value is provided, the section will not be shown.
/// This link will be loaded in a web view on tap of device management section.
/// Default: No Value.
@property (nonatomic, copy) NSURL * _Nullable deviceManagementLink;
/// Localized title text for the device management section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable deviceManagementTitle;
/// Localized description text for the device management section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable deviceManagementDescription;
/// Localized title text for the app permissions section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable appPermissionTitle;
/// Localized description text for the app permissions section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable appPermissionDescription;
/// List that contains the list of permissions required by the application.
/// These will be displayed on tap of the app permissions section.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appPermissionItems;
/// Localized description text for the app data collection section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataCollectionDescription;
/// List that contains the list of data collected by the application.
/// These will be displayed on tap of the app data collection section.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable dataCollectionItems;
/// Localized title text for the app data collection section.
/// If no value is provided, default value will be used.
@property (nonatomic, copy) NSString * _Nullable dataCollectionTitle;
/// A custom path to your app’s privacy setting screen.
/// Defaults to : Settings->Privacy
/// For display, the module will transform it to something like [dataSharingNavigation] → Data sharing.
/// Therefore, the default display would be Settings→Privacy→ Data sharing
@property (nonatomic, copy) NSString * _Nullable dataSharingNavigation;
/// Link to the customer’s privacy policy.
/// This link will be loaded in a web view on tap of customer’s privacy policy section.
/// Default: No value.
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyLink;
/// Determines if the customer privacy policy section is displayed.
/// Default: true
@property (nonatomic) BOOL enterprisePolicyShow;
/// Localized title text for the customer’s privacy section.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyTitle;
/// Localized title text for the customer’s privacy section.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable enterprisePolicyDescription;
/// Default content composed for <em>DataCollectionSummary</em>  that apps can reuse.
/// Note : Apps will still need to pass this information in <code>appDataCollectionSummary</code> for the module to display
/// return list includes the following
/// <ul>
///   <li>
///     Device hardware
///   </li>
///   <li>
///     User information
///   </li>
///   <li>
///     App information
///   </li>
///   <li>
///     Diagnostics
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AWPrivacyContent *> * _Nonnull dataCollectionDefaultItems;)
+ (NSArray<AWPrivacyContent *> * _Nonnull)dataCollectionDefaultItems SWIFT_WARN_UNUSED_RESULT;
/// Value from console that determines if admins allow feature Analytics. If the value is <code>false</code>, the User opt in screen for data sharing will not be shown to the user.
/// Default value : true
@property (nonatomic) BOOL allowFeatureAnalytics SWIFT_DEPRECATED_MSG("", "dataSharingShow");
/// Determines if user is allowed to exit terms screen without accepting. This will display a popup to the user.
/// Default value: false
@property (nonatomic) BOOL allowExit SWIFT_DEPRECATED_MSG("", "privacyRejectShow");
/// Link to the customer’s privacy policy.
@property (nonatomic, copy) NSString * _Nullable customerPrivacyPolicyLink SWIFT_DEPRECATED_MSG("", "enterprisePolicyLink");
/// Determines if the customer privacy policy section is displayed.
/// Default value: false
@property (nonatomic) BOOL hideCustomerPrivacyPolicy SWIFT_DEPRECATED_MSG("", "enterprisePolicyShow");
/// URL to be loaded for <em>MDM Data</em> If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSURL * _Nullable mdmDataURL SWIFT_DEPRECATED_MSG("", "deviceManagementLink");
/// Content to be displayed for <em>App permissions</em>.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appPermissionSummary SWIFT_DEPRECATED_MSG("", "appPermissionItems");
/// Content to be displayed for <em>App Data collection</em>.
/// If no value is provided, the section will not be shown.
@property (nonatomic, copy) NSArray<AWPrivacyContent *> * _Nullable appDataCollectionSummary SWIFT_DEPRECATED_MSG("", "dataCollectionItems");
/// Default content composed for <em>DataCollectionSummary</em>  that apps can reuse.
/// Note : Apps will still need to pass this information in <code>appDataCollectionSummary</code> for the module to display
/// return list includes the following
/// <ul>
///   <li>
///     Device hardware
///   </li>
///   <li>
///     User information
///   </li>
///   <li>
///     App information
///   </li>
///   <li>
///     Diagnostics
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<AWPrivacyContent *> * _Nonnull defaultDataCollectionSummary SWIFT_DEPRECATED_MSG("", "dataCollectionDefaultItems");)
+ (NSArray<AWPrivacyContent *> * _Nonnull)defaultDataCollectionSummary SWIFT_WARN_UNUSED_RESULT;
/// A custom path to your app’s privacy setting screen.
/// Defaults to <em>Settings->Data sharing with Vmware.</em>
/// The message will be displayed to user as: <em>You can always change this later in path->to->your->apps->privacy->settings</em>
@property (nonatomic, copy) NSString * _Nullable appPrivacySettingPath SWIFT_DEPRECATED_MSG("", "dataSharingNavigation");
/// Localized Header title text that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable privacyTermsHeaderTitle SWIFT_DEPRECATED_MSG("", "aboutPrivacyTitle");
/// Localized string for the header body that will be displayed in the user privacy consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable privacyTermsHeaderBody SWIFT_DEPRECATED_MSG("", "aboutPrivacyDescription");
/// Localized title that will displayed along with app data collection summary section
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable appDataCollectionTitle SWIFT_DEPRECATED_MSG("", "dataCollectionDescription");
/// Localized title that will displayed along with app permissions summary section
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable appPermissionsTitle SWIFT_DEPRECATED_MSG("", "appPermissionDescription");
/// Localized Header title text that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable dataSharingHeaderTitle SWIFT_DEPRECATED_MSG("", "dataSharingTitle");
/// Localized string for the header body that will be displayed in the data sharing consent screen.
/// If no value is provided, default value will be used
@property (nonatomic, copy) NSString * _Nullable dataSharingHeaderBody SWIFT_DEPRECATED_MSG("", "dataSharingDescription");
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
enum PrivacyContentImageType : NSInteger;

SWIFT_CLASS("_TtC9AWPrivacy16AWPrivacyContent")
@interface AWPrivacyContent : NSObject
/// Localized Title of the content.
@property (nonatomic, copy) NSString * _Nonnull title;
/// Localized Short description of the content.
@property (nonatomic, copy) NSString * _Nonnull summary;
/// Image to be displayed along the content
@property (nonatomic, strong) UIImage * _Nullable iconImage;
/// As an alternative to icon images, types can be specified for predefined types.
/// The module will associate the content with an image corresponding to the type.
@property (nonatomic) enum PrivacyContentImageType imageType;
/// Initializer
/// \param title Localized Title of the content.
///
/// \param summary Localized Short description of the content.
///
/// \param image Image to be displayed along the content
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title summary:(NSString * _Nonnull)summary image:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
/// Convenience Initializer
/// \param title Localized Title of the content.
///
/// \param summary Localized Short description of the content.
///
/// \param imageType Predefined image for the given type. If the type is unknown, the <code>iconImage</code> will be nil
///
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title summary:(NSString * _Nonnull)summary imageType:(enum PrivacyContentImageType)imageType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol AWPrivacyControllerDelegate;
@class UIViewController;

SWIFT_CLASS("_TtC9AWPrivacy19AWPrivacyController")
@interface AWPrivacyController : NSObject
/// Determine if there is a need to get user consent for privacy terms
/// This can true in the following cases
/// <ul>
///   <li>
///     If the user has never seen the privacy screen before.
///   </li>
///   <li>
///     If the user has seen privacy screen but not the Data sharing screen.
///     This can happen if <code>allowFeatureAnalytics</code> in config was <code>false</code> at the first time the
///     privacy controller was requested but has now changed the status to true.
///     This to ensure we get user consent for acceptance.
///   </li>
///   <li>
///     If the supplied <code>AWPrivacyConfig</code> is different from what was available when the user
///     accepted privacy terms.
///   </li>
/// </ul>
/// \param config Configuration to validate
///
///
/// returns:
/// Boolean that indicates if the apps need to display the privacy controller on launch to get user consent
+ (BOOL)needsUserConsentForConfig:(AWPrivacyConfig * _Nonnull)config SWIFT_WARN_UNUSED_RESULT;
/// Required initializer
/// \param config Instance of <code>AWPrivacyConfig</code> that has the configurations required for the app.
/// When nil, the defaults will be used.
///
/// \param delegate Call back to the application
///
- (nonnull instancetype)initWithConfig:(AWPrivacyConfig * _Nullable)config delegate:(id <AWPrivacyControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Creates a view controller to get the user consent for privacy terms and data sharing based on the config provided.
/// The controller assumes that this view conroller will always be embedded in a UINavigationController. If you don’t want this method to embed the vc in navigation controller, it’s the caller’s responsibility to ensure it is embedded in a UINavigationController when displayed to the user
/// \param embedInNavController If set to <code>true</code> will return a viewcontroller that is embedded in a <code>UINavigationController</code>. Defaults to true
///
///
/// returns:
/// Instance of <code>UIViewController</code> that will allow to get user consent for privacy terms and data sharing.
- (UIViewController * _Nonnull)makeUserConsentViewController:(BOOL)embedInNavController SWIFT_WARN_UNUSED_RESULT;
/// Creates a view controller to view the privacy settings/terms based on the config provided.
/// The controller assumes that this view conroller will always be embedded in a UINavigationController. If you don’t want this method to embed in navigation controller, it’s the caller’s responsibility to ensure it is embedded in a UINavigationController when displayed to the user
/// \param embedInNavController If set to <code>true</code> will return a viewcontroller that is embedded in a <code>UINavigationController</code>. Defaults to false.
///
///
/// returns:
/// Instance of <code>UIViewController</code> that will allow to view the privacy policies and data sharing status
- (UIViewController * _Nonnull)makePreviewPoliciesViewController:(BOOL)embedInNavController SWIFT_WARN_UNUSED_RESULT;
/// Clear any persisted state from the default data store
+ (void)reset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

enum AWPrivacyUserOptInStatus : NSInteger;

SWIFT_PROTOCOL("_TtP9AWPrivacy27AWPrivacyControllerDelegate_")
@protocol AWPrivacyControllerDelegate
@optional
/// Called when the user opt-in status has changed. Apps that set <code>false</code> to <code>allowFeatureAnalytics</code> in the Config will never get this call back.
/// \param status The new status after user action
///
- (void)userOptInStatusDidChangeWithStatus:(enum AWPrivacyUserOptInStatus)status;
/// Called when the user has not accepted to the Terms in the Privacy screen.
- (void)userDidDeclinePrivacyTerms;
@end

/// User Opt-in status in the Privacy dialog
/// <em>Values</em>
/// <code>unknown</code>  User opt-in pending
/// <code>enableAnalytics</code> The user has opted in for analytics.
/// <code>disableAnalytics</code> The user has opted out for analytics.
typedef SWIFT_ENUM(NSInteger, AWPrivacyUserOptInStatus, closed) {
  AWPrivacyUserOptInStatusUnknown = 0,
  AWPrivacyUserOptInStatusEnableAnalytics = 1,
  AWPrivacyUserOptInStatusDisableAnalytics = 2,
};



/// Predefined content types.
/// The module is aware of the icons to associate for these types
typedef SWIFT_ENUM(NSInteger, PrivacyContentImageType, closed) {
  PrivacyContentImageTypeUnknown = 0,
  PrivacyContentImageTypeCalendar = 1,
  PrivacyContentImageTypeContacts = 2,
  PrivacyContentImageTypePhotos = 3,
  PrivacyContentImageTypeCamera = 4,
  PrivacyContentImageTypeLocationServices = 5,
  PrivacyContentImageTypeNotifications = 6,
  PrivacyContentImageTypeFaceId = 7,
  PrivacyContentImageTypeDeviceHardware = 8,
  PrivacyContentImageTypeUserInformation = 9,
  PrivacyContentImageTypeAppInformation = 10,
  PrivacyContentImageTypeDiagnostics = 11,
};









#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
